N    ClientCommand( const char *ip, int port ) ;
N    ~ClientCommand( void ) ;
N    int GetCommand( string file, string localpath = "" ) const ;
N    int PutCommand( string fileName ) const ;
N    int HelpCommand( void ) const ;
N    int CdCommand( string path ) ;
Y    int LoginCommand( std::string username, std::string password ) ;
Y    int RegisterCommand( std::string username, std::string password ) ;
N    int ShareCommand( string file, string user ) ;
N    int RmCommand( string strfilename ) ;
N    int manager( void ) ;
N    int QuitCommand( void ) ;
Y    std::set<std::string> LsCommand( void ) const ;


-->
Y    int LoginCommand( std::string username, std::string password ) ;
Y    int RegisterCommand( std::string username, std::string password ) ;
Y    std::set<std::string> LsCommand( void ) const ;


std::set<std::string> ClientCommand::LsCommand( void ) const
{
    std::set<std::string> returnSet;
//    int retval = 0 ;
    char filename[RECV_BUF_SIZE] ;
    bzero( filename, sizeof(filename) ) ;
    // send command
    if ( write( m_sockfd, COMMAND_LS, strlen(COMMAND_LS) ) < 0 )
    {
        perror( "write" ) ;
        goto error ;
    }
    while( read( m_sockfd, filename, sizeof(filename) ) > 0  )
    {
        if ( END == *(int*)filename )
        {
            //printf( "\n" ) ;
            goto done ;
        }
        else if ( DT_DIR == *(int*)filename )
        {
            //printf( "\033[0;34m%s\033[0m \t", filename+sizeof(int) ) ;
        }
        else
        {
            //printf( "%s \t", filename+sizeof(int) ) ;
            returnSet.insert(std::string(filename));
        }
        fflush( stdout ) ;
        bzero( filename, sizeof(filename) ) ;
    }
done:
    return returnSet;
error:
//    retval = - 1;
    goto done ;
}


// register
int ClientCommand::RegisterCommand( std::string username, std::string password )
{
    int retval = 0 ;
    UserData user ;
    int replay = 0 ;
    int trycount = 3 ;
    // send command
    char command[COMMAND_BUF_SIZE] ;
    bzero( command, sizeof(command) ) ;
    strcpy( command, COMMAND_REGISTER ) ;
    if ( write( m_sockfd, command, strlen(command) ) < 0 )
    {
        perror( "write" ) ;
        goto error ;
    }
retry:
//    cout << "Please enter your username:" ;
//    cin >> user.username ;
//    cout << "Please enter your password:" ;
//    cin >> user.password ;
    strncpy(user.username, username.c_str(), sizeof(user.username));
    strncpy(user.password, password.c_str(), sizeof(user.password));
    if ( write( m_sockfd, &user, sizeof(user) ) < 0 )
    {
        perror( "write" ) ;
        goto error ;
    }
    // read verification result
    read( m_sockfd, &replay, sizeof(replay) ) ;
    if ( -1 == replay && trycount )
    {
        cout << "user already exists" << endl;
        --trycount ;
        goto retry ;
    }
    if ( -1 == replay )
    {
        goto error ;
    }
    if ( -1 == QDir().mkdir( user.username ) ) //FIXED COMPILER ERROR; ORIGINALLY mkdir( user.username, 0755 )
    {
        perror( "mkdir" ) ;
        goto error ;
    }
    strcpy( m_user.username, user.username ) ;
done:
    return retval ;
error:
    retval = -1 ;
    goto done ;
}

// login
int ClientCommand::LoginCommand( std::string username, std::string password )
{
    int retval = 0 ;
    int replay = 0 ;
    UserData user ;
    int trycount = 3 ;
    // send command
    char command[COMMAND_BUF_SIZE] ;
    bzero( command, sizeof(command) ) ;
    strcpy( command, COMMAND_LOGIN ) ;
    if ( write( m_sockfd, command, strlen(command) ) < 0 )
    {
        perror( "write" ) ;
        goto error ;
    }
retry:
//    cout << "Please enter your username:" ;
//    cin >> user.username ;
//    cout << "Please enter password:" ;
//    cin >> user.password ;
    strncpy(user.username, username.c_str(), sizeof(user.username));
    strncpy(user.password, password.c_str(), sizeof(user.password));
    // send username and password to socket
    if ( write( m_sockfd, &user, sizeof(user) ) < 0 )
    {
        perror( "write" ) ;
        goto error ;
    }
    // receiving verificaion result
    if ( read( m_sockfd, &replay, sizeof(replay) ) < 0 )
    {
        perror( "read" ) ;
        goto error ;
    }
    if ( -1 == replay && trycount )
    {
        cout << "incorrect username or password" << endl ;
        goto retry ;
    }
    strcpy( m_user.username, user.username ) ;
done:
    return retval ;
error:
    retval = -1;
    goto done ;
}

